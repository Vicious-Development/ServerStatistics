buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'maven-publish'
}

apply plugin: 'org.spongepowered.mixin'

group = "com.${organization}"
version = "${mcver}-${projectver}"


java {
    archivesBaseName = mainpackage
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: 'official', version: mcver
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mainpackage
            mods {
                serverstatistics {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mainpackage
            mods {
                serverstatistics {
                    source sourceSets.main
                }
            }
        }
        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mainpackage
            mods {
                serverstatistics {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', mainpackage, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                serverstatistics {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "${mainpackage}.refmap.json"

    config "${mainpackage}.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = coreprojectname
        url = uri("https://maven.pkg.${viciousorglink}/${coreprojectname}")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
            password = project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcver}-${forgever}"
    implementation "com.vicious:viciouscore:${mcver}-${vcver}:deobf"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    manifest {
        attributes([
                "Specification-Title": githubprojectname,
                "Specification-Vendor": organization,
                "Specification-Version": projectver, // We are version 1 of ourselves
                "Implementation-Title": githubprojectname,
                "Implementation-Version": version,
                "Implementation-Vendor" : organization,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

task releaseJar(type: Jar){
    from sourceSets.main.output
    classifier = ''
}
reobf{
    releaseJar
}

releaseJar.finalizedBy('reobfJar')

tasks.build.dependsOn('deobfJar','releaseJar')

artifacts{
    archives releaseJar
    archives deobfJar
}

/*
PUBLISHING START
 */

publishing {
    repositories {
        maven {
            name = githubprojectname
            url = uri("https://maven.pkg.${viciousorglink}/${githubprojectname}")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            groupId = group
            artifactId = mainpackage
            from components.java
            artifact deobfJar
        }
    }
}

/*
PUBLISHING END
 */